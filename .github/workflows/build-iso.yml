name: Build ISO
run-name: Building ISO
on: [push]
jobs:
  BuildIso:
    runs-on: ubuntu-latest-16-core
    timeout-minutes: 60
    steps:
      - name: Checkout github repo (+ download lfs dependencies)
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Checkout LFS objects
        run: git lfs checkout
      - name: Update
        run: sudo apt-get update
      - name: Install deps
        run: sudo apt-get install -y qemu-system-x86 libvirt-clients libvirt-daemon-system bridge-utils virtinst libvirt-daemon cloud-image-utils
      - name: Set up disk
        run: |
          qemu-img create -f qcow2 kernel/images/disk.qcow2 100G
      - name: Mount ISO
        run: |
          wget https://old-releases.ubuntu.com/releases/22.04/ubuntu-22.04.2-live-server-amd64.iso -O kernel/iso/ubuntu-22.04.2-live-server-amd64.iso -q
          sudo mount -r kernel/iso/ubuntu-22.04.2-live-server-amd64.iso /mnt
      - name: Run setup (10 min)
        run: |
          sudo python3 -m http.server 3003 --directory kernel/iso &
          cd kernel/qemu && sudo ./launch-qemu-AmdSevX64.old.sh \
            -oldfw \
            -mem 8192 \
            -hda ../images/disk.qcow2 \
            -cdrom ../iso/ubuntu-22.04.2-live-server-amd64.iso \
            -kernel /mnt/casper/vmlinuz \
            -initrd /mnt/casper/initrd \
            -append 'console=ttyS0 earlyprintk=serial autoinstall ds=nocloud-net;s=http://_gateway:3003/'
      - name: Launch VM
        working-directory: kernel/qemu
        run: |
          sudo screen -d -m ./launch-qemu-AmdSevX64.old.sh \
            -oldfw \
            -mem 8192 \
            -default-network \
            -hda ../images/disk.qcow2
          sleep 30
          until ssh -o StrictHostKeyChecking=no -i ../../services/dummy_ssh_key -p 8000 guest@localhost 'exit'; do sleep 5; done
      - name: Run setup scripts
        run: |
          ssh -o StrictHostKeyChecking=no -i services/dummy_ssh_key -p 8000 guest@localhost 'sudo dpkg -i *.deb'
          scp -o StrictHostKeyChecking=no -i services/dummy_ssh_key -P 8000 services/modules.txt guest@localhost:/home/guest/
          ssh -o StrictHostKeyChecking=no -i services/dummy_ssh_key -p 8000 guest@localhost 'sudo mv /home/guest/modules.txt /etc/initramfs-tools/modules'
          ssh -o StrictHostKeyChecking=no -i services/dummy_ssh_key -p 8000 guest@localhost 'sudo update-initramfs -u'
          scp -o StrictHostKeyChecking=no -i services/dummy_ssh_key -P 8000 guest@localhost:/boot/initrd.img-6.5.0-rc2-snp-guest-ad9c0bf475ec kernel/images/
          ssh -o StrictHostKeyChecking=no -i services/dummy_ssh_key -p 8000 guest@localhost 'sudo shutdown now'
      - name: Re-run VM with new kernel
        working-directory: kernel/qemu
        run: |
          sudo screen -d -m ./launch-qemu-AmdSevX64.old.sh \
            -mem 8192 \
            -default-network \
            -hda ../images/disk.qcow2 \
            -kernel ../images/vmlinuz-6.5.0-rc2-snp-guest-ad9c0bf475ec \
            -initrd ../images/initrd.img-6.5.0-rc2-snp-guest-ad9c0bf475ec \
            -append 'console=ttyS0 earlyprintk=serial'
          sleep 30
          until ssh -o StrictHostKeyChecking=no -i ../../services/dummy_ssh_key -p 8000 guest@localhost 'exit'; do sleep 5; done
      - name: Copy services and run setup scripts
        run: |
          scp -o StrictHostKeyChecking=no -i services/dummy_ssh_key -P 8000 services/setup.sh services/docker-runner.sh services/docker-runner.service  services/blyss-nvidia-persistenced.service services/ncr-config.toml guest@localhost:/home/guest/
          ssh -o StrictHostKeyChecking=no -i services/dummy_ssh_key -p 8000 guest@localhost 'sudo cp /home/guest/ncr-config.toml /etc/nvidia-container-runtime/config.toml'
          ssh -o StrictHostKeyChecking=no -i services/dummy_ssh_key -p 8000 guest@localhost 'chmod +x /home/guest/setup.sh && sudo /home/guest/setup.sh'
          ssh -o StrictHostKeyChecking=no -i services/dummy_ssh_key -p 8000 guest@localhost 'sudo shutdown now'
      - name: Shrink disk
        run: |
          qemu-img convert -O qcow2 kernel/images/disk.qcow2 kernel/images/disk-sparse.qcow2
      - name: Upload shrunk disk as artifact
        uses: actions/upload-artifact@v2
        with:
          name: disk-sparse.qcow2
          path: kernel/images/disk-sparse.qcow2



      